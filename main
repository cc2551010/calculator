;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; created by : christian carter
; completion date: N/A
; last update: may 21, 2023
;
; calculates addition, subtraction, multiplication, division
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.ORIG	x3000
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; run program till user enters 'q' or 'Q'
; R0 = character
; R1 = pointer to offset
; R2 = offset
; R3 = toggle bit for num/op input
; R4 = char count
; R5 = pointer to statement
; R6 = max length of statement
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MAIN
	JSR TITLE_DISPLAY
	JSR INSTRUCTIONS_DISPLAY
RUN_MAIN_AGAIN
	JSR NEWLINE_DISPLAY
RUN_MAIN_AGAIN_WO_NEWLINE
	JSR INIT
NEXT_CHAR
	JSR GET_CHAR		; get character
	LEA R1, BACKSPACE_CHAR	; check for 'backspace'
	LDR R2, R1, #0	
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz HANDLE_BACKSPACE
	LEA R1, q_CHAR		; check for 'q'
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz QUIT_MEM_EXT1
	LDR R2, R1, #1		; check for 'Q'
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz QUIT_MEM_EXT1
	LEA R1, ENTER_CHAR	; check for enter
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz READ_STATEMENT
	AND R2, R2, #0		; checks for statement length
	ADD R2, R2, #10
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R2, R4
	BRz GET_CHAR		
	LEA R1, SPACE_CHAR	; check for space character
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz STORE_AND_NEXT_CHAR
	LEA R1, MULT_CHAR_1	; check for character *
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz NUM_OR_OP
	ADD R1, R1, #1		; check for character +
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz NUM_OR_OP
	ADD R1, R1, #1		; check for character -
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz NUM_OR_OP
	ADD R1, R1, #1		; check for character /
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz NUM_OR_OP
	ADD R1, R1, #1		; check for character x
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRz NUM_OR_OP
	LEA R1, ZERO_CHAR	; check lower bound 0
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRn NEXT_CHAR
	ADD R1, R1, #1		; check lower bound 9
	LDR R2, R1, #0
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R0, R2
	BRp NEXT_CHAR
	BR STORE_AND_NEXT_CHAR

STORE_AND_NEXT_CHAR
	JSR INCR_CHAR_CNT	; next character
	JSR PRINT_CHAR
	JSR INPUT_CHAR
	JSR INCR_POINTER
	BR NEXT_CHAR

BACKSPACE_CHAR	.FILL		#8
q_CHAR		.FILL		#113
Q_CHAR		.FILL		#81
ENTER_CHAR	.FILL		#10

MULT_CHAR_1	.FILL		#42
ADD_CHAR	.FILL		#43
SUB_CHAR	.FILL		#45
DIV_CHAR	.FILL		#47
MULT_CHAR_2	.FILL		#120

ZERO_CHAR	.FILL		#48
NINE_CHAR	.FILL		#57

SPACE_CHAR	.FILL		#32

STATEMENT	.BLKW	10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NUM_OR_OP
	TRAP x21
	BR NEXT_CHAR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; R0 = addr of string
; R1 = sustain return addr
; R7 = return addr
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RUN_MAIN_AGAIN_MEM_EXT_1
	BR RUN_MAIN_AGAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TITLE_DISPLAY
	AND R1, R1, #0
	ADD R1, R7, #0
	LEA R0, TITLE
	TRAP x22
	AND R7, R7, #0
	ADD R7, R1, #0
	RET

TITLE		.STRINGZ	"========== CALCULATOR ==========\n"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; display instructions for program
;
; R0 = addr of string
; R1 = save return address
; R7 = return address
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INSTRUCTIONS_DISPLAY
	AND R1, R1, #0
	ADD R1, R7, #0
	LEA R0, INSTRUCTIONS	
	TRAP x22
	AND R7, R7, #0
	ADD R7, R1, #0
	RET

INSTRUCTIONS	.STRINGZ	"\nLegal operations: + - * x /\n"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; print newline character
;
; R0 = addr of string
; R1 = save return address
; R7 = return address
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

NEWLINE_DISPLAY
	AND R1, R1, #0
	ADD R1, R7, #0
	LEA R0, NEWLINE
	TRAP x22
	AND R7, R7, #0
	ADD R7, R1, #0
	RET

NEWLINE		.STRINGZ	"\n"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; initialize registers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INIT
	AND R0, R0, #0
	AND R1, R1, #0
	AND R2, R2, #0
	AND R3, R3, #0
	AND R4, R4, #0
	AND R5, R5, #0
	AND R6, R6, #0
	LEA R5, STATEMENT	; init pos of statement memory
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; user-input character
;
; R0 = input character
; R1 = sustain return memory addr
; R7 = return memory addr
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GET_CHAR
	AND R1, R1, #0
	ADD R1, R1, R7
	TRAP x20
	AND R7, R7, #0
	ADD R7, R7, R1
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; R5 = char pointer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INCR_POINTER
	ADD R5, R5, #1
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; R5 = char pointer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DECR_POINTER
	ADD R5, R5, #-1
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; R4 = char count
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HANDLE_BACKSPACE
	ADD R4, R4, #0
	BRz NEXT_CHAR
	JSR DECR_POINTER
	JSR DECR_CHAR_CNT
	JSR POP_CHAR
	AND R0, R0, #0		; new line
	LD R0, NEW_LINE
	TRAP x21
	JSR PRINT_STRING
	BR NEXT_CHAR
;;;;;;;;;;;;;;;;;;;;;;
; memory ext 1 of QUIT routine
;;;;;;;;;;;;;;;;;;;;;;
QUIT_MEM_EXT1
	BR QUIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; user-input character
;
; R0 = input character
; R1 = sustain return memory addr
; R7 = return memory addr
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DECR_CHAR_CNT
	ADD R4, R4, #-1		; decrease input chars
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; display chars to screen
;
; R0 = character
; R1 = sustain return memory addr
; R2 = pointer
; R7 = return memory addr
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PRINT_STRING
	AND R1, R1, #0
	ADD R1, R1, R7
	AND R0, R0, #0
	LEA R0, STATEMENT
	TRAP x22
	AND R7, R7, #0
	ADD R7, R7, R1
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; R0 = character
; R5 = pointer to statement
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INPUT_CHAR
	STR R0, R5, #0
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; display char to screen
; 
; R1 = sustain return memory addr
; R7 = return memory addr
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PRINT_CHAR
	ST R7, MEM_ADDR_SAVE_1
	TRAP x21
	LD R7, MEM_ADDR_SAVE_1
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; increase character count
; 
; R4 = char count
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INCR_CHAR_CNT
	ADD R4, R4, #1
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; pop char from statement
; 
; R0 = character
; R5 = pointer to statement
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
POP_CHAR
	AND R0, R0, #0
	STR R0, R5, #0
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; R0 = equal sign and new line
; R1 = character
; R2 = character offset
; R3 = pointer to multi-digit numbers
; R4 = character count
; R5 = pointer to statement
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
READ_STATEMENT
	ADD R4, R4, #0		; check if statement exists
	BRz RUN_MAIN_AGAIN_WO_NEWLINE

	LEA R0, EQUAL		; display equals
	TRAP x22

	LEA R5, STATEMENT	; set pointer to statement
	LDR R1, R5, #0		; load init character
	ADD R4, R4, #-1		; reduce chars to read
	LD R2, SPACE_CHAR	; load space character
	NOT R1, R1		; find if space
	ADD R1, R1, #1
	ADD R1, R1, R2
	BRz SKIP_CHAR		; skip space
	BRnp CHECK_IF_NUMBER
SKIP_CHAR			; skip spaces
	ADD R4, R4, #0		; check if statement exists
	BRz RUN_MAIN_AGAIN_MEM_EXT_1
	LDR R1, R5, #0		; load next character
	ADD R4, R4, #-1		; reduce chars to read
	NOT R1, R1		; find if space
	ADD R1, R1, #1
	ADD R1, R1, R2
	BRz SKIP_CHAR
CHECK_IF_NUMBER
	LDR R1, R5, #0		; reload current character

	LD  R2, ZERO_CHAR	; check if number
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R1, R2		
	BRn ILLEGAL_NUMBER_PLACEMENT

	LD  R2, NINE_CHAR
	NOT R2, R2
	ADD R2, R2, #1
	ADD R2, R1, R2		
	BRp ILLEGAL_NUMBER_PLACEMENT

	ADD R4, R4, #0		; check if reached end of statement

	BR RUN_MAIN_AGAIN_MEM_EXT_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; displays illegally place number error
;
; R0 = first char of addr
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ILLEGAL_NUMBER_PLACEMENT
	LEA R0, NUMBER_PLACEMENT
	TRAP x22
	BR RUN_MAIN_AGAIN_MEM_EXT_1

NUMBER_PLACEMENT	.STRINGZ	"A number was illegally placed."
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; user pressed 'q', resulting in program halt
;
; R0 = first char of addr
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
QUIT
	LEA R0, NEW_LINE
	TRAP x22
	LEA R0, QUIT_MSG
	TRAP x22
	HALT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; fills, blocks, strings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
QUIT_MSG	.STRINGZ	"You quit the program."


CHAR_COUNT	.FILL		#10
ASCII_VAL	.FILL		#48

EQUAL_CHAR	.FILL		#61

NUM_10E4	.FILL		#10000
NUM_10E3	.FILL		#1000
NUM_10E2	.FILL		#100
NUM_10E1	.FILL		#10
NUM_10E0	.FILL		#1

OP1	.BLKW	1
OP2	.BLKW	1
OP3	.BLKW	1
OP4	.BLKW	1

N1	.BLKW	6
N2	.BLKW	6
N3	.BLKW	6
N4	.BLKW	6
N5	.BLKW	6

OP_QUANTITY	.BLKW	1
NUM_QUANTITY	.BLKW	1

MEM_ADDR_SAVE_1	.BLKW		#1
MEM_ADDR_SAVE_2	.BLKW		#1

NEW_LINE	.STRINGZ	"\n"
EQUAL		.STRINGZ	" = "

ILLEGAL_INPUT	.STRINGZ	"\nYou've input an illegal character.\n"
OVERLOAD	.STRINGZ	"\nOutput exceeds 32-bit capacity."
NO_INPUT	.STRINGZ	"\nNothing was entered.\n"
DIV_BY_ZERO	.STRINGZ	"\nYou cannot divide by zero.\n"

	.END
